AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: |
  CloudFormation template to set up an EC2 instance with the Bluebear Streamlit application. This template creates a VPC with a public subnet (including an Internet Gateway and route) so that the instance gets a public IP address.

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
#  KeyPair:
#    Description: The name of an existing EC2 KeyPair to enable SSH access.
#    Type: AWS::EC2::KeyPair::KeyName
  GitRepo:
    Description: Git repository URL to clone.
    Type: String
    Default: 'https://github.com/aws-samples/spark-code-interpreter.git'
  ImageUri:
    Description: 'ECR URI for the  SparkOnLmabda image'
    Type: String
    Default: ''
  LambdaTimeout:
    Description: 'Optional: Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)'
    Default: 900
    Type: Number
  LambdaMemory:
    Description: 'Optional: Lambda memory in MB (min 128 - 10,240 max).'
    Default: 3008
    Type: Number 
  EC2AmiId:
    Description: "Ec2 AMI Id to host the bedrock chat agent"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
  GitBranch:
    Description: "Git branch for Interpreter"
    Default: 'feature/sloanintegration'
    Type: String
  DynamoDBTable:
    Type: String
    Description: DynamoDB table name
  UserId:
    Type: String
    Description: User ID
  BucketName:
    Type: String
    Description: Main bucket name
  InputBucket:
    Type: String
    Description: Input bucket name
  InputS3Path:
    Type: String
    Description: Input S3 path
  LambdaFunction:
    Type: String
    Description: Lambda function name
  MyIp:
    Type: String
    Description: Your IP address in CIDR notation (e.g., 1.2.3.4/32)
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}/32$

# Conditions:
#   S3BucketExists: !Not [!Equals [!Ref 'AWS::NoValue', '']]
#   ChatDataBucketExists: !Not [!Equals [!Ref 'AWS::NoValue', '']]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: BluebearVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: BluebearPublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: BluebearIGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: BluebearPublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and Streamlit traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIp
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref MyIp          
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: !Ref MyIp
        # SSH access from EC2 Instance Connect (adjust CIDR based on your region)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 3.16.146.0/29    # US East (Ohio)
          Description: EC2 Instance Connect - US East (Ohio)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 18.206.107.24/29  # US East (N. Virginia)
          Description: EC2 Instance Connect - US East (N. Virginia)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 3.120.181.40/29   # Europe (Frankfurt)
          Description: EC2 Instance Connect - Europe (Frankfurt)

  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join 
        - '-'
        - - !Ref DynamoDBTable
          - !Ref 'AWS::StackName'
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: SessionId
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      Tags:
        - Key: Name
          Value: ChatHistoryTable

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref BucketName
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ChatDataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref InputBucket
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true       

  SparkOnLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role used by the lambda running spark'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole' 

  SparkOnLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub 'SparkOnLmandaDefaulPolicy-${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: '*'
          - Effect: Allow
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource:
              Fn::Sub:
                - "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}"
                - Region: !Select [3, !Split [".", !Ref ImageUri ]]
                  Account: !Select [0, !Split [".", !Ref ImageUri ]]
                  RepositoryName: !Select [1, !Split ["/", !Select [ 0, !Split [":", !Select [5, !Split [".", !Ref ImageUri ]]]]]]
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
            Resource: 
              - !Sub '${S3Bucket.Arn}'
              - !Sub '${S3Bucket.Arn}/*'
              - !Sub '${ChatDataBucket.Arn}'
              - !Sub '${ChatDataBucket.Arn}/*'              
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:Query
            Resource: !GetAtt ChatHistoryTable.Arn
      Roles:
        - !Ref SparkOnLambdaRole
 
  SparkOnLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: Image
      FunctionName: !Sub 'sparkOnLambda-${AWS::StackName}'
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["/var/task/sparkLambdaHandler.lambda_handler"]
      Description: "Lambda to run spark containers"
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Role: !GetAtt SparkOnLambdaRole.Arn       

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BluebearAppPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                Resource: !GetAtt ChatHistoryTable.Arn
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                  - s3:GetObjectTagging
                  - s3:DeleteObjectTagging
                Resource: 
                  - !Sub '${S3Bucket.Arn}'
                  - !Sub '${S3Bucket.Arn}/*'
                  - !Sub '${ChatDataBucket.Arn}'
                  - !Sub '${ChatDataBucket.Arn}/*'       
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: 'arn:aws:s3:::*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SparkOnLambda.Arn

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      #KeyName: !Ref KeyPair
      ImageId: !Ref EC2AmiId # Ubuntu 20.04 LTS (ensure this is available in your region)
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: BluebearAppEC2
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          set -e

          # Update and upgrade system
          sudo dnf update && sudo dnf upgrade -y
          sudo yum groupinstall "Development Tools" -y
          sudo yum install libffi-devel bzip2-devel -y
          # sudo yum uninstall openssl-devel
          # sudo yum install openssl11-devel
          sudo yum install python-pip -y
          sudo yum install tmux git -y 
          # sudo yum install libffi-dev libssl-dev tmux git build-essential -y 
          # textract installtion pre-requisites
          # https://textract.readthedocs.io/en/stable/installation.html#ubuntu-debian
          # sudo yum install libxml2-dev libxslt1-dev antiword unrtf poppler-utils tesseract-ocr flac ffmpeg lame libmad0 libsox-fmt-mp3 sox libjpeg-dev swig -y


          # Optionally install Tesseract-OCR; if it fails, log the error and continue.
          # yum install -y tesseract-ocr-all || echo "Optional dependency tesseract-ocr-all installation failed, continuing..."

          # Clone the Git repository into a folder named Bluebear
          echo "Cloning repo ${GitRepo}"
          git clone -b ${GitBranch} ${GitRepo} bluebear
          cd bluebear

          # Install Python dependencies
          pip install -U setuptools
          pip install python-dateutil==2.8.2
          pip install -r req.txt


          # Start the Bluebear Streamlit app in a tmux session
          tmux new -d -s mysession "python3 -m streamlit run bedrock-chat.py"

          echo "Setup complete. Use 'tmux attach -t mysession' to view the session."

Outputs:
  EC2PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  SSHCommand:
    Description: SSH command to connect to the instance (replace 'your-key.pem' with your private key file)
    Value: !Sub ssh -i your-key.pem ubuntu@${EC2Instance.PublicIp}
  StreamlitURL:
    Description: URL to access the Bluebear Streamlit app
    Value: !Sub http://${EC2Instance.PublicIp}:8501
  S3BucketName:
    Description: Name of the S3 bucket for Bedrock data
    Value: !Ref S3Bucket
  ChatDataBucketName:
    Description: Name of the S3 bucket for chat data
    Value: !Ref ChatDataBucket
  ChatHistoryTableName:
    Description: Name of the DynamoDB table for chat history
    Value: !Ref ChatHistoryTable
  
