AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: |
  CloudFormation template to set up an EC2 instance with the Bluebear Streamlit application. This template creates a VPC with a public subnet (including an Internet Gateway and route) so that the instance gets a public IP address.

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
  KeyPair:
    Description: The name of an existing EC2 KeyPair to enable SSH access.
    Type: AWS::EC2::KeyPair::KeyName
  GitRepo:
    Description: Git repository URL to clone.
    Type: String
    Default: 'https://github.com/aws-samples/spark-code-interpreter.git'
  ImageUri:
    Description: 'ECR URI for the  SparkOnLmabda image'
    Type: String
    Default: ''
  LambdaTimeout:
    Description: 'Optional: Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)'
    Default: 900
    Type: Number
  LambdaMemory:
    Description: 'Optional: Lambda memory in MB (min 128 - 10,240 max).'
    Default: 3008
    Type: Number 

Conditions:
  S3BucketExists: !Not [!Equals [!Ref 'AWS::NoValue', '']]
  ChatDataBucketExists: !Not [!Equals [!Ref 'AWS::NoValue', '']]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: BluebearVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: BluebearPublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: BluebearIGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: BluebearPublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and Streamlit traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0          
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0

  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join 
        - '-'
        - - "chat-history"
          - !Ref 'AWS::StackName'
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: SessionId
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      Tags:
        - Key: Name
          Value: ChatHistoryTable

   S3Bucket:
    Type: 'AWS::S3::Bucket'
    Condition: !Not [!Condition S3BucketExists]
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join 
        - '-'
        - - "bedrock-data-bucket"
          - !Ref 'AWS::StackName'
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ChatDataBucket:
    Type: 'AWS::S3::Bucket'
    Condition: !Not [!Condition ChatDataBucketExists]
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join 
        - '-'
        - - "bluebear-chat-data"
          - !Ref 'AWS::StackName'
          - !Ref 'AWS::AccountId'
          - !Ref 'AWS::Region'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SparkOnLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role used by the lambda running spark'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole' 

  SparkOnLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub 'SparkOnLmandaDefaulPolicy-${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: '*'
          - Effect: Allow
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource:
              Fn::Sub:
                - "arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}"
                - Region: !Select [3, !Split [".", !Ref ImageUri ]]
                  Account: !Select [0, !Split [".", !Ref ImageUri ]]
                  RepositoryName: !Select [1, !Split ["/", !Select [ 0, !Split [":", !Select [5, !Split [".", !Ref ImageUri ]]]]]]
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
            Resource: 
              - !If [S3BucketExists, !Sub 'arn:aws:s3:::bedrock-data-bucket-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}', !GetAtt S3Bucket.Arn]
              - !If [S3BucketExists, !Sub 'arn:aws:s3:::bedrock-data-bucket-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}/*', !Sub '${S3Bucket.Arn}/*']
              - !If [ChatDataBucketExists, !Sub 'arn:aws:s3:::bluebear-chat-data-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}', !GetAtt ChatDataBucket.Arn]
              - !If [ChatDataBucketExists, !Sub 'arn:aws:s3:::bluebear-chat-data-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}/*', !Sub '${ChatDataBucket.Arn}/*']
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:Query
            Resource: !GetAtt ChatHistoryTable.Arn
      Roles:
        - !Ref SparkOnLambdaRole
  SparkOnLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: Image
      FunctionName: !Sub 'sparkOnLambda-${AWS::StackName}'
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: ["/var/task/sparkLambdaHandler.lambda_handler"]
      Description: "Lambda to run spark containers"
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Role: !GetAtt SparkOnLambdaRole.Arn       

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BluebearAppPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                Resource: !GetAtt ChatHistoryTable.Arn
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                  - s3:GetObjectTagging
                  - s3:DeleteObjectTagging
                Resource: 
                  - !If [S3BucketExists, !Sub 'arn:aws:s3:::bedrock-data-bucket-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}', !GetAtt S3Bucket.Arn]
                  - !If [S3BucketExists, !Sub 'arn:aws:s3:::bedrock-data-bucket-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}/*', !Sub '${S3Bucket.Arn}/*']
                  - !If [ChatDataBucketExists, !Sub 'arn:aws:s3:::bluebear-chat-data-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}', !GetAtt ChatDataBucket.Arn]
                  - !If [ChatDataBucketExists, !Sub 'arn:aws:s3:::bluebear-chat-data-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}/*', !Sub '${ChatDataBucket.Arn}/*']
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: 'arn:aws:s3:::*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SparkOnLambda.Arn

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      ImageId: ami-0cb91c7de36eed2cb # Ubuntu 20.04 LTS (ensure this is available in your region)
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: BluebearAppEC2
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          set -e

          # Update and upgrade system
          apt update && apt upgrade -y
          sudo apt install software-properties-common -y
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt install libffi-dev libssl-dev python3.11 python3.11-venv python3.11-dev tmux git build-essential -y 
          ls -la /usr/bin/python3
          sudo rm /usr/bin/python3
          sudo ln -s python3.11 /usr/bin/python3

          # Optionally install Tesseract-OCR; if it fails, log the error and continue.
          apt install -y tesseract-ocr-all || echo "Optional dependency tesseract-ocr-all installation failed, continuing..."

          # Clone the Git repository into a folder named Bluebear
          echo "Cloning repo ${GitRepo}"
          git clone ${GitRepo} Bluebear
          cd Bluebear

          # Install Python dependencies
          python3 -m pip install -r req.txt --upgrade --break-system-packages

          # Set configurations for Lambda Name and Bucket Name
          sed -i 's/fairstone/${S3Bucket}/g' config.json
          sed -i 's/soal/${SparkOnLambda}/g' config.json
          echo "FINAL CONFIGURATIONS"
          cat config.json

          # Start the Bluebear Streamlit app in a tmux session
          tmux new -d -s mysession "python3 -m streamlit run bedrock-chat.py"

          echo "Setup complete. Use 'tmux attach -t mysession' to view the session."

Outputs:
  EC2PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  SSHCommand:
    Description: SSH command to connect to the instance (replace 'your-key.pem' with your private key file)
    Value: !Sub ssh -i your-key.pem ubuntu@${EC2Instance.PublicIp}
  StreamlitURL:
    Description: URL to access the Bluebear Streamlit app
    Value: !Sub http://${EC2Instance.PublicIp}:8501
  S3BucketName:
    Description: Name of the S3 bucket for Bedrock data
    Value: !If 
      - S3BucketExists
      - !Sub 'bedrock-data-bucket-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}'
      - !Ref S3Bucket
  ChatDataBucketName:
    Description: Name of the S3 bucket for chat data
    Value: !If 
      - ChatDataBucketExists
      - !Sub 'bluebear-chat-data-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}'
      - !Ref ChatDataBucket
  ChatHistoryTableName:
    Description: Name of the DynamoDB table for chat history
    Value: !Ref ChatHistoryTable
  S3BucketWarning:
    Condition: S3BucketExists
    Description: Warning about existing S3 bucket
    Value: "The S3 bucket 'bedrock-data-bucket' already exists. Using existing bucket."
  ChatDataBucketWarning:
    Condition: ChatDataBucketExists
    Description: Warning about existing Chat Data S3 bucket
    Value: "The S3 bucket 'bluebear-chat-data' already exists. Using existing bucket."
  
